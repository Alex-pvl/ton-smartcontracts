#include "imports/stdlib.fc";

const const::min_tokens_for_storage = 10000000; ;; 0.01 TON

(int, slice, slice) load_data() inline {
    var ds = get_data().begin_parse();
    return (
        ds~load_uint(32),   ;; counter value
        ds~load_msg_addr(), ;; the most recent sender
        ds~load_msg_addr()  ;; owner address
    );
}

() save_data(int counter_value, slice recent_sender, slice owner_address) impure inline {
    set_data(begin_cell()
        .store_uint(counter_value, 32)
        .store_slice(recent_sender)
        .store_slice(owner_address)
        .end_cell()
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);

    var (counter_value, recent_sender, owner_address) = load_data();

    if (op == 1) {
        save_data(counter_value + 1, recent_sender, owner_address);
        return ();
    }

    if (op == 2) {
        ;; deposit
    }

    if (op == 3) {
        throw_unless(103, equal_slice_bits(sender_address, owner_address));
        int withdrawal_amount = in_msg_body~load_coins();
        var [balance, _] = get_balance();
        throw_unless(104, balance >= withdrawal_amount);

        int return_value = min(withdrawal_amount, balance - const::min_tokens_for_storage);

        ;; TODO sending internal message with funds

        return ();
    }

    return ();
}

(int, slice, slice) get_contract_storage_data() method_id {
    var (counter_value, recent_sender, owner_address) = load_data();
    return (
        counter_value,
        recent_sender,
        owner_address
    );
}
